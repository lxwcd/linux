Linux 启动流程与模块管理

> 鸟哥的 Linux 私房菜基础学习篇第四版 第 19 章 启动流程、模块管理与Loader

# Linux 启动流程
了解启动流程有助于在系统出问题时快速的修复

- 加载 BIOS 的硬件信息和进行开机自检，并根据设置取得第一个可启动的设备
- 读取并执行第一个启动设备内的 MBR 引导程序
- 根据引导程序的设置加载内核文件，内核开始检测硬件与加载内核模块驱动程序
- 硬件驱动成功后，内核主动调用 systemd 程序，并以 default.target 流程启动


## BIOS CMOS UEFI
> [BIOS, CMOS, UEFI - What's the difference?](https://www.youtube.com/watch?v=LGz0Io_dh_I&ab_channel=PowerCertAnimatedVideos) 
> 鸟哥的 Linux 私房菜基础学习篇第四版 第 2.2.3 节


1. BIOS
- BIOS，Basic Input Output System
- BIOS 是写入到计算机主板上的一个固件（firmware），即一个软件程序
- BIOS 保存着计算机系统最重要的基本输入输出程序，系统信息设置，开机加电自检程序（POST, power-on self test）等
- 当按下电源键后，硬件会主动读取 BIOS 来加载硬件信息以及进行硬件自我检测，自检完成后会发出蜂鸣声来
  如果硬件自检成功，会发出一声很短的蜂鸣声，
  如果没有蜂鸣声或者发出很多次蜂鸣声，表示硬件自检有问题，此时计算机会生成 beep code 来帮助查找问题
- BIOS 在进行开机自检初始化后查找 boot device to boot operating system
- BIOS 是程序，存储在主板上的 BIOS chip 上，BIOS 芯片是非易失性的，因此断电后仍能保存数据

2. CMOS
- 计算机关机后仍需维持一些数据，如系统时间，用户对 BIOS 的修改等，这些设置存储在主板的 CMOS 芯片上
- CMOS chip 是易失性的 (volatile)，靠主板上的一个纽扣电池供电
- 如果纽扣电池被取下再重新装上去，则 BIOS 将会重置为初始化设置，即之前在 BIOS 界面做的修改都丢失


3. UEFI
- UEFI 是 Unified extensible firmware interface，即统一可扩展固态接口，用来代替传统 BIOS   
传统的分区方式为 MBR，BIOS 不懂 GPT，需要通过 GPT 提供的兼容模式读取磁盘设备
BIOS 是 16位汇编语言编写的程序，与现代新的操作系统接轨有点弱
基于上述等各种原因，有了 UEFI 的产生来取代传统的 BIOS


## 术语约定
下面笔记中术语约定
- 用 BIOS 代指传统 BIOS 和 UEFI BIOS
- 用 MBR 代指磁盘最前面可安装 boot loader 的区块，包括 MBR 分区和 GPT 分区

## boot loader
BIOS 在完成开机自检（POST）后，会分析计算机中有哪些存储设备，依据用户的设置去取得能够启动的硬盘，
然后读取第一个扇区的 MBR 位置，其中前 446 字节会放置启动引导程序

- 启动引导程序是底层硬件与操作系统之间的中间接口软件
- boot loader 是操作系统安装在 MBR 上的一个软件
- 主要作用是加载内核文件，引导操作系统启动
- 引导程序是在操作系统安装时提供的，能识别硬盘内的文件系统格式，读取内核文件
- 不同的操作系统会安装不同的 boot loader 程序

### boot loader 的主要任务
- 提供选项 
用户可以依据不同的启动选项，加载不同的内核文件，实现多重引导
- 加载内核文件
boot loader 读取内核文件到内存中指定的位置
- 转交其他启动引导程序
将启动管理功能转交给其他启动引导程序负责，如启动引导程序安装在每个分区的启动扇区中，
根据 MBR 的引导提供的选项，转交不同的启动扇区中引导程序来加载不同的操作系统
- 启动引导程序仅认识自己系统分区内的可启动的内核文件，以及其他的引导程序


## 加载内核检测硬件与 initramfs
1. boot loader 读取内核文件到内存指定的位置后，boot loader 将控制权交给内核，由内核进行后面的初始化步骤
内核会以自己的功能重新检测一次硬件，测试与驱动各个周边设备，包括存储设备、CPU、网卡等

2. 一般，linux 发行版会将非必要且能编译为模块的内核功能编译为模块，因此 USB、SATA、SCSI 等磁盘设备的驱动程序
通常以模块的方式存在，这些模块在 `/lib/modules` 目录中
`/lib` 不能与 `/` 放在不同分区中
内核模块是在运行过程中动态加载到内核中的可扩展组件，可以在系统运行时动态的加载与卸载

3. 而内核文件放置在 `/boot` 目录中，以 `vmlinuz` 开头
```bash
[root@ubuntu22-c0 ~]$ ls --format=single-column -F /boot/
config-5.15.0-79-generic
config-5.15.0-82-generic
grub/
initrd.img@
initrd.img-5.15.0-79-generic
initrd.img-5.15.0-82-generic
initrd.img.old@
lost+found/
System.map-5.15.0-79-generic
System.map-5.15.0-82-generic
vmlinuz@
vmlinuz-5.15.0-79-generic
vmlinuz-5.15.0-82-generic
vmlinuz.old@
```

4. 因此，启动过程中内核需要挂载根目录才能读取内核模块提供的加载驱动程序的功能
在系统启动过程中，内核是第一个被加载和执行的程序。
当计算机启动时，引导加载程序（bootloader）会将内核加载到内存中，并将控制权转交给内核。
在这个早期的引导阶段，操作系统的其他组件（例如根文件系统、设备驱动程序等）尚未准备好。

为了能够访问根文件系统并加载内核模块，内核需要将根文件系统挂载到文件系统层次结构中的适当位置。
在Linux系统中，根文件系统通常被挂载到“/”目录（或称为根目录）下。
挂载根文件系统后，内核可以通过文件系统来访问文件和目录，并加载内核模块。

在挂载根文件系统之前，内核只能在内存中运行，无法访问存储在硬盘上的其他文件或模块。
因此，挂载根目录使得内核能够读取根文件系统中的内核模块，并通过加载驱动程序的功能来初始化和管理设备。

总之，系统启动过程中，内核必须挂载根目录，以便可以访问根文件系统，并读取其中的内核模块提供的加载驱动程序的功能。

而由于担心影响到磁盘中文件系统，启动过程中根目录时以只读的方式挂载的

然而，内核要挂载根目录，需要加载 SATA 磁盘驱动程序，否则内核无法与磁盘通信，而驱动程序在 `/lib/mudules` 目录中，
不挂载根目录就无法加载该驱动程序

5. 为了解决上面的问题，采用虚拟文件系统（Initial RAM Disk 或 Initial RAM Filesystem）
一般使用的文件名为 `/boot/initrd` 或 `/boot/initramfs`
该文件能够通过 boot loader 加载到内存中，然后在内存中模拟成一个根目录，且此模拟在内存中的
文件系统能够提供一个可执行程序，通过该程序就能加载启动过程中所需的内核模块，如 USB，RAID，LVM，SCSI 等文件系统与磁盘接口的驱动程序
加载内核模块完成后该虚拟文件系统将被释放，然后内核挂载实际的根目录文件系统，然后开始后续的正常启动流程

可以列出虚拟文件系统内容：
```bash
[root@ubuntu22-c0 ~]$ whatis lsinitramfs
lsinitramfs (8)      - list content of an initramfs image
[root@ubuntu22-c0 ~]$ lsinitramfs /boot/initrd.img | less
```

6. 内核完整加载后，就开始指向系统的第一个程序 systemd


## 系统执行的第一个程序 systemd
内核加载完毕，硬件检测与驱动程序加载后，主机的硬件就已经准备就绪
然后内核会主动调用第一个程序，即 systemd，其主要功能是准备软件执行的环境，包括系统的主机名，网络设置，语言设置，
文件系统格式即其他服务的启动等
systemd 已经舍弃了 System V 的运行级别 runlevel 
操作系统会通过 systemd 的默认启动服务集合，即 `/etc/systemd/system/default.target` 来规划

### 常见的操作环境 target 与兼容于 runlevel 的级别
过去 runlevel 与现在的 target 的对应关系
```bash
[root@ubuntu22-c0 ~]$ ll -d /usr/lib/systemd/system/runlevel*.target
lrwxrwxrwx 1 root root 15 Mar  2  2023 /usr/lib/systemd/system/runlevel0.target -> poweroff.target
lrwxrwxrwx 1 root root 13 Mar  2  2023 /usr/lib/systemd/system/runlevel1.target -> rescue.target
lrwxrwxrwx 1 root root 17 Mar  2  2023 /usr/lib/systemd/system/runlevel2.target -> multi-user.target
lrwxrwxrwx 1 root root 17 Mar  2  2023 /usr/lib/systemd/system/runlevel3.target -> multi-user.target
lrwxrwxrwx 1 root root 17 Mar  2  2023 /usr/lib/systemd/system/runlevel4.target -> multi-user.target
lrwxrwxrwx 1 root root 16 Mar  2  2023 /usr/lib/systemd/system/runlevel5.target -> graphical.target
lrwxrwxrwx 1 root root 13 Mar  2  2023 /usr/lib/systemd/system/runlevel6.target -> reboot.target
```

### systemd 的处理流程
1. 当取得了 `/etc/systemd/system/default.target` 后，会链接到 `/lib/systemd/system/` 目录中取得 multi-user.target 或
graphical.target（正常情况启动），第一个对应命令行界面，第二个为图形界面
```bash
[root@ubuntu22-c0 ~]$ ll /etc/systemd/system/default.target
lrwxrwxrwx 1 root root 37 Feb 21  2023 /etc/systemd/system/default.target -> /lib/systemd/system/multi-user.target
```

2. 如果使用的是 multi-user.target，则 systemd 会根据其配置加载相应的 unit
```bash
#  SPDX-License-Identifier: LGPL-2.1-or-later
#
#  This file is part of systemd.
#
#  systemd is free software; you can redistribute it and/or modify it
#  under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation; either version 2.1 of the License, or
#  (at your option) any later version.

[Unit]
Description=Multi-User System
Documentation=man:systemd.special(7)
Requires=basic.target
Conflicts=rescue.service rescue.target
After=basic.target rescue.service rescue.target
AllowIsolate=yes
```
根据上面的内容可知，multi-user.target 运行前需要先运行 basic.target


而在 multi-user.target 运行完成后 systemd 还会查看一些 Wants 的 units，
如系统默认加载的 unit 和用户设置加载的 unit：
```bash
[root@ubuntu22-c0 ~]$ ls /usr/lib/systemd/system/multi-user.target.wants/
dbus.service  plymouth-quit.service       systemd-ask-password-wall.path  systemd-update-utmp-runlevel.service
getty.target  plymouth-quit-wait.service  systemd-logind.service          systemd-user-sessions.service
```

```bash
[root@ubuntu22-c0 ~]$ ls /etc/systemd/system/multi-user.target.wants/
atd.service                   irqbalance.service           postfix.service           thermald.service
console-setup.service         lxd-agent.service            remote-fs.target          ua-reboot-cmds.service
cron.service                  ModemManager.service         rsyslog.service           ubuntu-advantage.service
dmesg.service                 networkd-dispatcher.service  secureboot-db.service     ufw.service
e2scrub_reap.service          NetworkManager.service       ssh.service               unattended-upgrades.service
grub-common.service           open-vm-tools.service        systemd-networkd.service  wpa_supplicant.service
grub-initrd-fallback.service  pollinate.service            systemd-resolved.service
```

也可以通过下面命令查看 multi-user.target 启动所依赖的 unit
```bash
[root@ubuntu22-c0 ~]$ systemctl list-dependencies multi-user.target
```

# 自定义启动脚本 rc.local
过去 System V 管理方式中，系统启动后，如果想让系统额外执行某些程序，可以将该程序脚本的绝对路径写到 `/etc/rc.d/rc.local` 文件中

但 systemd 机制中，可以写一个 systemd 的启动脚本配置文件到 `/etc/systemd/system` 目录中，然后用 systemctl enable 
设置为开机自启

## ubuntu22.04
systemd 依旧支持 rc.local 的方式，并提供 rc-local.service 的服务，但并非处于运行状态
```bash
[root@ubuntu22-c0 ~]$ systemctl status rc-local.service
○ rc-local.service - /etc/rc.local Compatibility
     Loaded: loaded (/lib/systemd/system/rc-local.service; static)
    Drop-In: /usr/lib/systemd/system/rc-local.service.d
             └─debian.conf
     Active: inactive (dead)
       Docs: man:systemd-rc-local-generator(8)
```

查看该 service 文件内容：
```bash
[root@ubuntu22-c0 ~]$ cat /lib/systemd/system/rc-local.service
#  SPDX-License-Identifier: LGPL-2.1-or-later
#
#  This file is part of systemd.
#
#  systemd is free software; you can redistribute it and/or modify it
#  under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation; either version 2.1 of the License, or
#  (at your option) any later version.

# This unit gets pulled automatically into multi-user.target by
# systemd-rc-local-generator if /etc/rc.local is executable.
[Unit]
Description=/etc/rc.local Compatibility
Documentation=man:systemd-rc-local-generator(8)
ConditionFileIsExecutable=/etc/rc.local
After=network.target

[Service]
Type=forking
ExecStart=/etc/rc.local start
TimeoutSec=0
RemainAfterExit=yes
GuessMainPID=no
```
根据文件内容可知该服务需要有 `/etc/rc.local` 文件且有执行权限，默认无该文件，如果想要自定义启动脚本可以创建该文件


## rocky8.6
同样有 rc-local.service
```bash
[root@mysql ~]$ systemctl status rc-local.service
● rc-local.service - /etc/rc.d/rc.local Compatibility
   Loaded: loaded (/usr/lib/systemd/system/rc-local.service; static; vendor preset: disabled)
   Active: inactive (dead)
```

查看 service 内容：
```bash
[root@mysql ~]$ grep -Ev "^\s*(#|$)"  /usr/lib/systemd/system/rc-local.service
[Unit]
Description=/etc/rc.d/rc.local Compatibility
Documentation=man:systemd-rc-local-generator(8)
ConditionFileIsExecutable=/etc/rc.d/rc.local
After=network-online.target
Wants=network-online.target
[Service]
Type=forking
ExecStart=/etc/rc.d/rc.local start
TimeoutSec=0
RemainAfterExit=yes
GuessMainPID=no
```
从上可知，该服务需要有 `/etc/rc.d/rc.local` 且有可执行权限，rocky8.6 默认有该文件，但无可执行权限
```bash
[root@mysql ~]$ ll /etc/rc.d/rc.local
-rw-r--r--. 1 root root 474 Feb 22  2023 /etc/rc.d/rc.local
```

因此要使用该文件自定义启动脚本，需要加上执行权限，然后重新加载 service 配置即可
```bash
[root@mysql ~]$ chmod a+x /etc/rc.d/rc.local
[root@mysql ~]$ systemctl daemon-reload
[root@mysql ~]$ systemctl status rc-local.service
● rc-local.service - /etc/rc.d/rc.local Compatibility
   Loaded: loaded (/usr/lib/systemd/system/rc-local.service; enabled-runtime; vendor preset: disabled)
   Active: inactive (dead)
     Docs: man:systemd-rc-local-generator(8)
[root@mysql ~]$ systemctl list-dependencies multi-user.target | grep rc-local
● ├─rc-local.service
[root@mysql ~]$ systemctl start rc-local.service
[root@mysql ~]$ systemctl status rc-local.service
● rc-local.service - /etc/rc.d/rc.local Compatibility
   Loaded: loaded (/usr/lib/systemd/system/rc-local.service; enabled-runtime; vendor preset: disabled)
   Active: active (exited) since Sat 2023-09-02 13:50:16 CST; 2s ago
     Docs: man:systemd-rc-local-generator(8)
  Process: 4718 ExecStart=/etc/rc.d/rc.local start (code=exited, status=0/SUCCESS)

Sep 02 13:50:16 mysql systemd[1]: Starting /etc/rc.d/rc.local Compatibility...
Sep 02 13:50:16 mysql systemd[1]: Started /etc/rc.d/rc.local Compatibility.
```


# 内核与内核模块
## 查看内核模块位置
```bash
[root@ubuntu22-c0 ~]$ ls /lib/modules/$(uname -r)/kernel --format=single-column
arch
block
crypto
drivers
fs
kernel
lib
mm
net
samples
sound
ubuntu
v4l2loopback
zfs
```

## 查看内核模块依赖性
查看文件
```bash
[root@ubuntu22-c0 ~]$ less /lib/modules/$(uname -r)/modules.dep
```

可以用 depmod 建立该文件


## lsmod 查看内核模块
```bash
[root@rocky8-3 log]$ lsmod | wc -l
76
[root@rocky8-3 log]$ lsmod | head -n10
Module                  Size  Used by
udp_diag               16384  0
tcp_diag               16384  0
inet_diag              24576  2 tcp_diag,udp_diag
nls_utf8               16384  1
isofs                  49152  1
uinput                 20480  0
rfcomm                 86016  0
bnep                   24576  0
vsock_loopback         16384  0
[root@rocky8-3 log]$
[root@rocky8-3 log]$ whatis lsmod
lsmod (8)            - Show the status of modules in the Linux Kernel
```

## modinfo 查看模块信息
```bash
[root@rocky8-3 log]$ modinfo --help
Usage:
        modinfo [options] filename [args]
Options:
        -a, --author                Print only 'author'
        -d, --description           Print only 'description'
        -l, --license               Print only 'license'
        -p, --parameters            Print only 'parm'
        -n, --filename              Print only 'filename'
        -0, --null                  Use \0 instead of \n
        -F, --field=FIELD           Print only provided FIELD
        -k, --set-version=VERSION   Use VERSION instead of `uname -r`
        -b, --basedir=DIR           Use DIR as filesystem root for /lib/modules
        -V, --version               Show version
        -h, --help                  Show this help
[root@rocky8-3 log]$
[root@rocky8-3 log]$ whatis modinfo
modinfo (8)          - Show information about a Linux Kernel module
```


## modprobe 加载和删除内核模块
- modeprobe 加载模块会自动解决依赖问题

```bash
[root@rocky8-3 log]$ whatis modprobe
modprobe (8)         - Add and remove modules from the Linux Kernel
```

## /etc/modprobe.d/*.conf 内核模额外参数设置文件
- 自己建立 `.conf` 文件来设置额外的内核参数


## sysctl 内核参数管理
- sysctl 配置 linux 系统内核参数，这些参数以文件的形式显示在 /proc/sys/ 目录中
```bash
[root@rocky8-3 log]$ whatis sysctl
sysctl (8)           - configure kernel parameters at runtime
sysctl (2)           - read/write system parameters
```

```bash
Usage:
 sysctl [options] [variable[=value] ...]

Options:
  -a, --all            display all variables
  -A                   alias of -a
  -X                   alias of -a
      --deprecated     include deprecated parameters to listing
  -b, --binary         print value without new line
  -e, --ignore         ignore unknown variables errors
  -N, --names          print variable names without values
  -n, --values         print only values of the given variable(s)
  -p, --load[=<file>]  read values from file
  -f                   alias of -p
      --system         read values from all system directories
  -r, --pattern <expression>
                       select setting that match expression
  -q, --quiet          do not echo variable set
  -w, --write          enable writing a value to variable
  -o                   does nothing
  -x                   does nothing
  -d                   alias of -h

 -h, --help     display this help and exit
 -V, --version  output version information and exit

For more details see sysctl(8).
```

### sysctl -a 列出全部参数
```bash
[root@rocky8-3 ipv4]$ sysctl -a | head
abi.vsyscall32 = 1
crypto.fips_enabled = 0
debug.exception-trace = 1
debug.kprobes-optimization = 1
dev.cdrom.autoclose = 1
dev.cdrom.autoeject = 0
dev.cdrom.check_media = 0
dev.cdrom.debug = 0
dev.cdrom.info = CD-ROM information, Id: cdrom.c 3.20 2003/12/17
dev.cdrom.info =
```

### 查看具体内核参数的值
- /proc/sys 目录下，子目录之间用 `.` 分隔
```bash
[root@rocky8-3 ipv4]$ pwd
/proc/sys/net/ipv4
[root@rocky8-3 ipv4]$ ll ip_forward
-rw-r--r-- 1 root root 0 May  3 19:07 ip_forward
[root@rocky8-3 ipv4]$ cd ../../
[root@rocky8-3 sys]$ ls
abi  crypto  debug  dev  fs  kernel  net  user  vm
[root@rocky8-3 sys]$
[root@rocky8-3 sys]$ sysctl net.ipv4.ip_forward
net.ipv4.ip_forward = 0
```
### sysctl -n 仅显示内核参数的值
```bash
[root@rocky8-3 sys]$ sysctl -n net.ipv4.ip_forward
0
```

### sysctl -w 修改内核参数
- 只能临时生效
- 不需要写名全部完整路径，不用写 `/proc/sys/sys/` 的路径

```bash
[root@rocky8-3 sys]$ sysctl -n net.ipv4.ip_forward
0
[root@rocky8-3 sys]$ sysctl -w net.ipv4.ip_forward=1
net.ipv4.ip_forward = 1
[root@rocky8-3 sys]$ sysctl net.ipv4.ip_forward
net.ipv4.ip_forward = 1
```
```bash
[root@rocky8-2 ~]$ sysctl net.ipv4.ip_forward
net.ipv4.ip_forward = 1
[root@rocky8-2 ~]$ pwd
/root
```

或直接修改文件，需要写明全部路径

```
[root@rocky8-3 sys]$ echo 0 > /proc/sys/net/ipv4/ip_forward
[root@rocky8-3 sys]$ sysctl net.ipv4.ip_forward
net.ipv4.ip_forward = 0
```

### 配置文件中修改内核参数使其永久生效

- `man 8 sysctl` 查看帮助
```bash
[root@rocky8-2 ~]$ whatis sysctl
sysctl (8)           - configure kernel parameters at runtime
sysctl (2)           - read/write system parameters
[root@rocky8-2 ~]$
[root@rocky8-2 ~]$ man 8 sysctl
```

内核参数配置文件如下，执行顺序从上到下
可以在 `/etc/sysctl.d` 中创建自定义 `.conf`
如果参数有重复，则最终 `/etc/sysctl.conf` 文件中的参数会覆盖前面的设置

```bash
--system
    Load settings from all system configuration files. Files are read from directories in  the  fol‐
    lowing  list  in given order from top to bottom.  Once a file of a given filename is loaded, any
    file of the same name in subsequent directories is ignored.
    /etc/sysctl.d/*.conf
    /run/sysctl.d/*.conf
    /usr/local/lib/sysctl.d/*.conf
    /usr/lib/sysctl.d/*.conf
    /lib/sysctl.d/*.conf
    /etc/sysctl.conf
```

`/etc/sysctl.conf` 文件说明：
```bash
  1 # sysctl settings are defined through files in
  2 # /usr/lib/sysctl.d/, /run/sysctl.d/, and /etc/sysctl.d/.
  3 #
  4 # Vendors settings live in /usr/lib/sysctl.d/.
  5 # To override a whole file, create a new file with the same in
  6 # /etc/sysctl.d/ and put new settings there. To override
  7 # only specific settings, add a file with a lexically later
  8 # name in /etc/sysctl.d/ and put new settings there.
  9 #
 10 # For more information, see sysctl.conf(5) and sysctl.d(5).
```

`sysctl.conf` 文件的帮助文档
```bash
[root@rocky8-2 ~]$ whatis sysctl.conf
sysctl.conf (5)      - sysctl preload/configuration file
[root@rocky8-2 ~]$
[root@rocky8-2 ~]$ man 5 sysctl.conf
```

修改的格式如：
```bash
net.ipv4.ip_forward = 1
```

### sysctl -p 从文件中读内核参数
- 修改文件后用 `sysctl -p` 使文件的设置生效

不是所有情况均可生效，如仅仅是将某个设置注释，则用 sysctl -p 不会生效，可以用 sysctl -w 修改设置使其立即生效

## 常用内核参数
> [Chapter 2. Working with sysctl and kernel tunables](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/kernel_administration_guide/working_with_sysctl_and_kernel_tunables)
> [sysctl](https://wiki.archlinux.org/title/sysctl#Networking)


```bash
[root@rocky8-2 sysctl.d]$ sysctl net.ipv4.icmp_echo_ignore_all
net.ipv4.icmp_echo_ignore_all = 0
[root@rocky8-2 sysctl.d]$
[root@rocky8-2 sysctl.d]$ sysctl net.ipv4.ip_forward
net.ipv4.ip_forward = 1
[root@rocky8-2 sysctl.d]$ sysctl net.ipv4.ip_nonlocal_bind
net.ipv4.ip_nonlocal_bind = 0
[root@rocky8-2 sysctl.d]$
```

### ip_forward
内存中参数对应查看
```bash
[root@ubuntu22-c0 ~]$ cat /proc/sys/net/ipv4/ip_forward
0
```

### rp_filter
`rp_filter` 是 Linux 操作系统中的一个网络参数，用于设置反向路径过滤（Reverse Path Filtering）的行为。

反向路径过滤是一种网络安全机制，用于防止 IP 地址伪装和 IP 源路由攻击。它通过检查收到的网络数据包的源 IP 地址和输入接口，验证数据包是否通过了正确的路径进入系统。如果数据包的源 IP 地址不是通过与数据包出口相同的接口进入系统，那么该数据包将被视为违规或潜在的攻击，并且可能会被丢弃。

在 Linux 中，`rp_filter` 参数可以设置为以下几个值：

- 0：禁用反向路径过滤。内核不会检查数据包的反向路径。这是默认值。
- 1：启用严格的反向路径过滤。内核会检查数据包的反向路径，并丢弃不符合预期路径的数据包。
- 2：启用松散的反向路径过滤。内核会检查数据包的反向路径，但允许某些例外情况，例如使用源路由的数据包。

通常情况下，建议将 `rp_filter` 参数设置为默认值 0，除非有特定的网络安全需求或配置要求。在某些情况下，可能需要根据网络拓扑和路由设置来调整 `rp_filter` 的值，以确保网络正常运行并防止潜在的攻击。

你可以使用以下命令来查看和更改 `rp_filter` 参数的值：

- 查看当前值：
```bash
[root@rs2 ~]$ sysctl net.ipv4.conf.default.rp_filter
net.ipv4.conf.default.rp_filter = 2
[root@rs2 ~]$ sysctl net.ipv4.conf.eth0.rp_filter
net.ipv4.conf.eth0.rp_filter = 2
[root@rs2 ~]$ sysctl net.ipv4.conf.all.rp_filter
net.ipv4.conf.all.rp_filter = 2
```

- 临时更改为其他值（例如设置为 1）：
```bash
sysctl -w net.ipv4.conf.default.rp_filter=1
```

- 永久更改，编辑 `/etc/sysctl.conf` 文件并添加或修改以下行：
```bash
net.ipv4.conf.default.rp_filter = 1
```
然后保存文件并执行 `sysctl -p` 命令使更改生效。

### arp_ignore
```bash
[root@rs2 ~]$ sysctl net.ipv4.conf.all.arp_ignore
net.ipv4.conf.all.arp_ignore = 0
```

### arp_announce
```bash
[root@rs2 ~]$ sysctl net.ipv4.conf.all.arp_announce
net.ipv4.conf.all.arp_announce = 0
```

# Boot Loader: Grub/Grub2
ubuntu22.04 中为 grub，rocky8.6 为 grub2
boot loader 的程序代码执行与设置值加载分为两个阶段

1. stage 1：执行 boot loader 主程序
这个主程序安装在启动区，及 MBR 或启动扇区
因为 MBR 太小，因此仅安装 boot loader 的最小主程序，并未安装相关配置文件

2. stage 2: 主程序加载配置文件
一般，配置文件在 /boot 中，与 grub 有关的配置文件在 /boot/grub 中
rocky8.6 用 grub2

```bash 
[root@ubuntu22-c0 ~]$ ls /boot/grub/
fonts  gfxblacklist.txt  grub.cfg  grubenv  i386-pc  locale  unicode.pf2
```
```bash
[root@mysql ~]$ ls /boot/grub2/
device.map  fonts  grub.cfg  grubenv  i386-pc
```

## gurb 配置文件 /boot/grub/grub.cfg
grub 优点：
- 识别与支持较多的文件系统
- 启动时可以自行编辑与修改启动设置选项
- 可以动态查找修改配置文件，而不需要在修改配置文件后重新安装 grub
  
安装在 MBR 中的 grub 程序最重要的任务之一是从磁盘中加载内核文件，以让内核能驱动整个系统的硬件
因此，grub 必须能识别磁盘

该配置文件不建议修改，而是使用 `/etc/default/grub` 和 `/etc/grub.d/`  

## grub 配置文件 /etc/default/grub
- GRUB_CMDLINE_LINUX 内核的外加参数
如果内核在启动是还要加入额外的参数，可以在这里加入，以 key=value 形式，多个参数以空格间隔开

修改了该配置文件后需要更新 /boot/grub/grub.cfg 文件
如果系统为 BIOS 引导方式
- 方法一：执行 update-grub 命令更新 /boot/grub/grub.cfg
```bash
root@ubuntu22 init.d $ update-grub
Sourcing file `/etc/default/grub'
Sourcing file `/etc/default/grub.d/init-select.cfg'
Generating grub configuration file ...
Found linux image: /boot/vmlinuz-5.15.0-69-generic
Found initrd image: /boot/initrd.img-5.15.0-69-generic
Found linux image: /boot/vmlinuz-5.15.0-67-generic
Found initrd image: /boot/initrd.img-5.15.0-67-generic
Warning: os-prober will not be executed to detect other bootable partitions.
Systems on them will not be added to the GRUB boot configuration.
Check GRUB_DISABLE_OS_PROBER documentation entry.
done
```

- 方法二： 执行命令 `grub-mkconfig -o /boot/grub/grub.cfg` 
结果和上面方法相同


# 查看启动方式 BIOS 还是 UEFI
> [Guide To Check UEFI or BIOS In Windows/Linux System](https://servonode.com/check-uefi-or-bios-in-widows-or-linux)

## 方法一：查看 /sys/firmware/efi 目录
`/sys/firmware/efi` 目录存在则为 UEFI 启动

- ubuntu20.04 UEFI 启动
```bash
[10:17:49 root@ubuntu2004 /sys/firmware]#ls
acpi  dmi  efi  memmap
[10:17:50 root@ubuntu2004 /sys/firmware]#
```

- rocky8.6 BIOS 启动
```bash
root@rocky86 ~ $ cd /sys/firmware/
root@rocky86 firmware $ ls
acpi  dmi  memmap  qemu_fw_cfg
```

## 方法二：dmesg
- ubuntu20.04 UEFI 启动
```bash
root@ubuntu2004 ~# dmesg | grep efi:
[    0.000000] efi: EFI v2.60 by HUAWEI
[    0.000000] efi:  ACPI 2.0=0x8f7fe014  SMBIOS=0x8c4ed000  SMBIOS 3.0=0x8c4eb000  ESRT=0x8c4e9c18  MEMATTR=0x88fd9018  MOKvar=0x88fd7000 
```

- rocky8.6 BIOS 启动
```bash
root@rocky86 firmware $ dmesg | grep efi
[    0.000000] clocksource: refined-jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 1910969940391419 ns
[    5.408252] tsc: Refined TSC clocksource calibration: 2918.420 MHz
root@rocky86 firmware $ 
root@rocky86 firmware $ dmesg | grep efi:
```


## 方法三：适合虚拟机安装查看
- VMware ---> 虚拟机 ---> 设置 ---> 选项 ---> 高级
![](img/2023-04-02-15-27-03.png)

